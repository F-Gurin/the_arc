import json
import telebot
from bot_definitions import KeyboardButton, Psychologist

from bot_configs.config import PSYCHOLOGISTS_BOT_TOKEN as TOKEN
bot = telebot.TeleBot(TOKEN)

rootButton = KeyboardButton(
    name='rootButton',
    root_button=True,
    downward_buttons={
        'üÜòSOS': None,
        'üë§–ó–∞—è–≤–∫–∏': None,
        'üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ': None,
        '‚ùì–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞': None
    },
    message='–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç "–ö–æ–≤—á–µ–≥–∞". –Ø –Ω—É–∂–µ–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –ª–∏—á–Ω—ã–π –ø—Ä–∏–µ–º, –≥—Ä—É–ø–ø—É –∏–ª–∏ –≤–µ–±–∏–Ω–∞—Ä—ã.',
    markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
)
rootButton.markup.add('üÜòSOS', 'üë§–ó–∞—è–≤–∫–∏', 'üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '‚ùì–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', row_width=2)

supportButton = KeyboardButton(
    name='supportButton',
    button_text='‚ùì–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
    upward_button=rootButton,
    downward_buttons=None,
    message="–ï—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç –∏ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
    markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
)
supportButton.markup.add('‚è™–ù–∞–∑–∞–¥')
supportButton.supportRequests = []
supportButton.support_request_accepted_message = "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞"

scheduleButton = KeyboardButton(
    name='scheduleButton',
    button_text='üìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
    upward_button=rootButton,
    downward_buttons=None,
    message="–í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ. –¢–∞–º –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: link",
    markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
)
scheduleButton.markup.add('‚è™–ù–∞–∑–∞–¥')

applicationsButton = KeyboardButton(
    name='applicationsButton',
    button_text='üë§–ó–∞—è–≤–∫–∏',
    upward_button=rootButton,
    downward_buttons={
        '‚úÖ–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É': None
    },
    message="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
    markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
)
applicationsButton.markup.add('‚è™–ù–∞–∑–∞–¥')
# applicationsButton.application_message = (
#     '–ò–º—è: ' + telebot_defenitions.examplePatient.first_name + '\n' +
#     '–§–∞–º–∏–ª–∏—è: ' + telebot_defenitions.examplePatient.last_name + '\n' +
#     '–¢–µ–ª–µ—Ñ–æ–Ω: ' + telebot_defenitions.examplePatient.telephone_number + '\n' +
#     '–¢–µ–ª–µ–≥—Ä–∞–º: ' + telebot_defenitions.examplePatient.telegram + '\n' +
#     'E-mail: ' + telebot_defenitions.examplePatient.email + '\n' +
#     '–¢–∏–ø: ' + telebot_defenitions.examplePatient.appointment_type + '\n' +
#     '–ß—Ç–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –æ–±—Å—É–¥—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å: ' + telebot_defenitions.examplePatient.problem + '\n' +
#     '–ï—Å—Ç—å –ª–∏ –æ–ø—ã—Ç –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏: ' + telebot_defenitions.examplePatient.experience + '\n' +
#     '–ó–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: ' + telebot_defenitions.examplePatient.application_date + '\n'
# )
applicationsButton.applications_quantity = 0
applicationsButton.application_markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
applicationsButton.application_markup.add('‚úÖ–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É', '‚è™–ù–∞–∑–∞–¥')

acceptApplicationButton = KeyboardButton(
    name='acceptApplicationButton',
    button_text='‚úÖ–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É',
    upward_button=applicationsButton,
    downward_buttons=None,
    message="–ó–∞–∫—Ä–µ–ø–∏–ª –∑–∞—è–≤–∫—É –∑–∞ –í–∞–º–∏. –£–≤–µ–¥–æ–º–ª—é –í–∞—Å, –∫–æ–≥–¥–∞ –ú–∞—Ä–∏—è –≤—ã–±–µ—Ä–µ—Ç –≤—Ä–µ–º—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.", # TODO name shouldn't be hardcoded
    markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
)
acceptApplicationButton.markup.add('‚èÆ–ú–µ–Ω—é')

emergencyButton = KeyboardButton(
    name='emergencyButton',
    button_text='üÜòSOS',
    upward_button=rootButton,
    downward_buttons=None,
    message="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å.",
    markup=telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
)
emergencyButton.markup.add('‚è™–ù–∞–∑–∞–¥')

psychologists = {}
try:
    with open("psychologists.json", 'r') as json_file:
        for user in json.load(json_file).values():
            psychologists[user['id']] = Psychologist.de_json(user, locals()[user["lastButtonPressed"]])
except IOError:
   pass


@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):

    psychologists[message.from_user.id] = Psychologist(message.from_user, rootButton)
    with open("psychologists.json", 'w') as json_file:
        json.dump(psychologists, json_file, indent=4)

    bot.reply_to(message, rootButton.message, reply_markup=rootButton.markup)

    if psychologists[message.from_user.id].authorized is False:
        bot.send_message(
            message.from_user.id, 
            '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ\n–í–∞—à id:\n{}'.format(message.from_user.id)
            )


@bot.message_handler(content_types=["text"])
def handle_text(message):

    if message.from_user.id not in psychologists.keys():
        return None
    if not psychologists[message.from_user.id].authorized:
        return None

    if message.text == '‚è™–ù–∞–∑–∞–¥':
        psychologists[message.from_user.id].lastButtonPressed = psychologists[message.from_user.id].lastButtonPressed.upward_button
        bot.send_message(
            message.from_user.id, 
            psychologists[message.from_user.id].lastButtonPressed.message, 
            reply_markup=psychologists[message.from_user.id].lastButtonPressed.markup
            )
    elif message.text == '‚èÆ–ú–µ–Ω—é':
        psychologists[message.from_user.id].lastButtonPressed = rootButton
        bot.send_message(
            message.from_user.id, 
            psychologists[message.from_user.id].lastButtonPressed.message, 
            reply_markup=psychologists[message.from_user.id].lastButtonPressed.markup
            )
    elif psychologists[message.from_user.id].lastButtonPressed.button_text == '‚ùì–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
        supportButton.supportRequests.append(message.text) # TODO save info
        bot.send_message(
            message.from_user.id, 
            supportButton.support_request_accepted_message
            )
        psychologists[message.from_user.id].lastButtonPressed = rootButton
        bot.send_message(
            message.from_user.id, 
            psychologists[message.from_user.id].lastButtonPressed.message, 
            reply_markup=psychologists[message.from_user.id].lastButtonPressed.markup
            )
    elif message.text in psychologists[message.from_user.id].lastButtonPressed.downward_buttons.keys():
        psychologists[message.from_user.id].lastButtonPressed = psychologists[message.from_user.id].lastButtonPressed.downward_buttons[message.text]
        match psychologists[message.from_user.id].lastButtonPressed.button_text:
            case 'üë§–ó–∞—è–≤–∫–∏':
                if applicationsButton.applications_quantity > 0:
                    bot.send_message(
                        message.from_user.id, 
                        psychologists[message.from_user.id].lastButtonPressed.application_message, 
                        reply_markup=psychologists[message.from_user.id].lastButtonPressed.application_markup
                        )
                else:
                    bot.send_message(
                        message.from_user.id, 
                        psychologists[message.from_user.id].lastButtonPressed.message, 
                        reply_markup=psychologists[message.from_user.id].lastButtonPressed.markup
                        )
            case '‚úÖ–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É':
                bot.send_message(
                    message.from_user.id, psychologists[message.from_user.id].lastButtonPressed.message, 
                    reply_markup=psychologists[message.from_user.id].lastButtonPressed.markup
                    )
                psychologists[message.from_user.id].lastButtonPressed = rootButton
                bot.send_message(
                    message.from_user.id, 
                    psychologists[message.from_user.id].lastButtonPressed.message, 
                    reply_markup=psychologists[message.from_user.id].lastButtonPressed.markup
                    )
            case _:
                bot.send_message(
                    message.from_user.id, 
                    psychologists[message.from_user.id].lastButtonPressed.message, 
                    reply_markup=psychologists[message.from_user.id].lastButtonPressed.markup
                    )
    else:
        bot.send_message(message.from_user.id, "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    
    with open("psychologists.json", 'w') as json_file:
        json.dump(psychologists, json_file, indent=4)


bot.polling(none_stop=True, interval=0)